#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pharmacy
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PHARMACY")]
	public partial class DataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertADMIN(ADMIN instance);
    partial void UpdateADMIN(ADMIN instance);
    partial void DeleteADMIN(ADMIN instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertEMPACCOUNT(EMPACCOUNT instance);
    partial void UpdateEMPACCOUNT(EMPACCOUNT instance);
    partial void DeleteEMPACCOUNT(EMPACCOUNT instance);
    partial void InsertEMPLOYEE(EMPLOYEE instance);
    partial void UpdateEMPLOYEE(EMPLOYEE instance);
    partial void DeleteEMPLOYEE(EMPLOYEE instance);
    partial void InsertMEDICINE(MEDICINE instance);
    partial void UpdateMEDICINE(MEDICINE instance);
    partial void DeleteMEDICINE(MEDICINE instance);
    partial void InsertPURCHASE(PURCHASE instance);
    partial void UpdatePURCHASE(PURCHASE instance);
    partial void DeletePURCHASE(PURCHASE instance);
    partial void InsertSALE(SALE instance);
    partial void UpdateSALE(SALE instance);
    partial void DeleteSALE(SALE instance);
    partial void InsertSALES_ITEM(SALES_ITEM instance);
    partial void UpdateSALES_ITEM(SALES_ITEM instance);
    partial void DeleteSALES_ITEM(SALES_ITEM instance);
    partial void InsertSUPPLIER(SUPPLIER instance);
    partial void UpdateSUPPLIER(SUPPLIER instance);
    partial void DeleteSUPPLIER(SUPPLIER instance);
    #endregion
		
		public DataBaseDataContext() : 
				base(global::Pharmacy.Properties.Settings.Default.PHARMACYConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ADMIN> ADMINs
		{
			get
			{
				return this.GetTable<ADMIN>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<EMPACCOUNT> EMPACCOUNTs
		{
			get
			{
				return this.GetTable<EMPACCOUNT>();
			}
		}
		
		public System.Data.Linq.Table<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this.GetTable<EMPLOYEE>();
			}
		}
		
		public System.Data.Linq.Table<MEDICINE> MEDICINEs
		{
			get
			{
				return this.GetTable<MEDICINE>();
			}
		}
		
		public System.Data.Linq.Table<PURCHASE> PURCHASEs
		{
			get
			{
				return this.GetTable<PURCHASE>();
			}
		}
		
		public System.Data.Linq.Table<SALE> SALEs
		{
			get
			{
				return this.GetTable<SALE>();
			}
		}
		
		public System.Data.Linq.Table<SALES_ITEM> SALES_ITEMs
		{
			get
			{
				return this.GetTable<SALES_ITEM>();
			}
		}
		
		public System.Data.Linq.Table<SUPPLIER> SUPPLIERs
		{
			get
			{
				return this.GetTable<SUPPLIER>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ADMIN")]
	public partial class ADMIN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _A_ID;
		
		private string _A_USERNAME;
		
		private string _A_PASSWORD;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnA_IDChanging(string value);
    partial void OnA_IDChanged();
    partial void OnA_USERNAMEChanging(string value);
    partial void OnA_USERNAMEChanged();
    partial void OnA_PASSWORDChanging(string value);
    partial void OnA_PASSWORDChanged();
    #endregion
		
		public ADMIN()
		{
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_ID", DbType="VarChar(10)")]
		public string A_ID
		{
			get
			{
				return this._A_ID;
			}
			set
			{
				if ((this._A_ID != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnA_IDChanging(value);
					this.SendPropertyChanging();
					this._A_ID = value;
					this.SendPropertyChanged("A_ID");
					this.OnA_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_USERNAME", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string A_USERNAME
		{
			get
			{
				return this._A_USERNAME;
			}
			set
			{
				if ((this._A_USERNAME != value))
				{
					this.OnA_USERNAMEChanging(value);
					this.SendPropertyChanging();
					this._A_USERNAME = value;
					this.SendPropertyChanged("A_USERNAME");
					this.OnA_USERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_PASSWORD", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string A_PASSWORD
		{
			get
			{
				return this._A_PASSWORD;
			}
			set
			{
				if ((this._A_PASSWORD != value))
				{
					this.OnA_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._A_PASSWORD = value;
					this.SendPropertyChanged("A_PASSWORD");
					this.OnA_PASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ADMIN", Storage="_EMPLOYEE", ThisKey="A_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.ADMINs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.ADMINs.Add(this);
						this._A_ID = value.EMP_ID;
					}
					else
					{
						this._A_ID = default(string);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _C_ID;
		
		private string _C_NAME;
		
		private string _C_SEX;
		
		private System.DateTime _C_DATE_OF_BIRTH;
		
		private string _C_PHONE;
		
		private string _C_MAIL;
		
		private EntitySet<SALE> _SALEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnC_IDChanging(string value);
    partial void OnC_IDChanged();
    partial void OnC_NAMEChanging(string value);
    partial void OnC_NAMEChanged();
    partial void OnC_SEXChanging(string value);
    partial void OnC_SEXChanged();
    partial void OnC_DATE_OF_BIRTHChanging(System.DateTime value);
    partial void OnC_DATE_OF_BIRTHChanged();
    partial void OnC_PHONEChanging(string value);
    partial void OnC_PHONEChanged();
    partial void OnC_MAILChanging(string value);
    partial void OnC_MAILChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._SALEs = new EntitySet<SALE>(new Action<SALE>(this.attach_SALEs), new Action<SALE>(this.detach_SALEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string C_ID
		{
			get
			{
				return this._C_ID;
			}
			set
			{
				if ((this._C_ID != value))
				{
					this.OnC_IDChanging(value);
					this.SendPropertyChanging();
					this._C_ID = value;
					this.SendPropertyChanged("C_ID");
					this.OnC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string C_NAME
		{
			get
			{
				return this._C_NAME;
			}
			set
			{
				if ((this._C_NAME != value))
				{
					this.OnC_NAMEChanging(value);
					this.SendPropertyChanging();
					this._C_NAME = value;
					this.SendPropertyChanged("C_NAME");
					this.OnC_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_SEX", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string C_SEX
		{
			get
			{
				return this._C_SEX;
			}
			set
			{
				if ((this._C_SEX != value))
				{
					this.OnC_SEXChanging(value);
					this.SendPropertyChanging();
					this._C_SEX = value;
					this.SendPropertyChanged("C_SEX");
					this.OnC_SEXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_DATE_OF_BIRTH", DbType="Date NOT NULL")]
		public System.DateTime C_DATE_OF_BIRTH
		{
			get
			{
				return this._C_DATE_OF_BIRTH;
			}
			set
			{
				if ((this._C_DATE_OF_BIRTH != value))
				{
					this.OnC_DATE_OF_BIRTHChanging(value);
					this.SendPropertyChanging();
					this._C_DATE_OF_BIRTH = value;
					this.SendPropertyChanged("C_DATE_OF_BIRTH");
					this.OnC_DATE_OF_BIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_PHONE", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string C_PHONE
		{
			get
			{
				return this._C_PHONE;
			}
			set
			{
				if ((this._C_PHONE != value))
				{
					this.OnC_PHONEChanging(value);
					this.SendPropertyChanging();
					this._C_PHONE = value;
					this.SendPropertyChanged("C_PHONE");
					this.OnC_PHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_MAIL", DbType="VarChar(50)")]
		public string C_MAIL
		{
			get
			{
				return this._C_MAIL;
			}
			set
			{
				if ((this._C_MAIL != value))
				{
					this.OnC_MAILChanging(value);
					this.SendPropertyChanging();
					this._C_MAIL = value;
					this.SendPropertyChanged("C_MAIL");
					this.OnC_MAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_SALE", Storage="_SALEs", ThisKey="C_ID", OtherKey="C_ID")]
		public EntitySet<SALE> SALEs
		{
			get
			{
				return this._SALEs;
			}
			set
			{
				this._SALEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SALEs(SALE entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_SALEs(SALE entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPACCOUNT")]
	public partial class EMPACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EMPAC_ID;
		
		private string _EMPAC_USERNAME;
		
		private string _EMPAC_PASSWORD;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMPAC_IDChanging(string value);
    partial void OnEMPAC_IDChanged();
    partial void OnEMPAC_USERNAMEChanging(string value);
    partial void OnEMPAC_USERNAMEChanged();
    partial void OnEMPAC_PASSWORDChanging(string value);
    partial void OnEMPAC_PASSWORDChanged();
    #endregion
		
		public EMPACCOUNT()
		{
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPAC_ID", DbType="VarChar(10)")]
		public string EMPAC_ID
		{
			get
			{
				return this._EMPAC_ID;
			}
			set
			{
				if ((this._EMPAC_ID != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMPAC_IDChanging(value);
					this.SendPropertyChanging();
					this._EMPAC_ID = value;
					this.SendPropertyChanged("EMPAC_ID");
					this.OnEMPAC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPAC_USERNAME", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EMPAC_USERNAME
		{
			get
			{
				return this._EMPAC_USERNAME;
			}
			set
			{
				if ((this._EMPAC_USERNAME != value))
				{
					this.OnEMPAC_USERNAMEChanging(value);
					this.SendPropertyChanging();
					this._EMPAC_USERNAME = value;
					this.SendPropertyChanged("EMPAC_USERNAME");
					this.OnEMPAC_USERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMPAC_PASSWORD", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EMPAC_PASSWORD
		{
			get
			{
				return this._EMPAC_PASSWORD;
			}
			set
			{
				if ((this._EMPAC_PASSWORD != value))
				{
					this.OnEMPAC_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._EMPAC_PASSWORD = value;
					this.SendPropertyChanged("EMPAC_PASSWORD");
					this.OnEMPAC_PASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_EMPACCOUNT", Storage="_EMPLOYEE", ThisKey="EMPAC_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.EMPACCOUNTs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.EMPACCOUNTs.Add(this);
						this._EMPAC_ID = value.EMP_ID;
					}
					else
					{
						this._EMPAC_ID = default(string);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EMPLOYEE")]
	public partial class EMPLOYEE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EMP_ID;
		
		private string _EMP_NAME;
		
		private string _EMP_SEX;
		
		private System.DateTime _EMP_DATE_OF_BIRTH;
		
		private string _EMP_TYPE;
		
		private System.DateTime _EMP_JOB_DATE;
		
		private string _EMP_PHONE;
		
		private string _EMP_MAIL;
		
		private string _SUP_ADD;
		
		private EntitySet<ADMIN> _ADMINs;
		
		private EntitySet<EMPACCOUNT> _EMPACCOUNTs;
		
		private EntitySet<SALE> _SALEs;
		
		private EntityRef<SUPPLIER> _SUPPLIER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEMP_IDChanging(string value);
    partial void OnEMP_IDChanged();
    partial void OnEMP_NAMEChanging(string value);
    partial void OnEMP_NAMEChanged();
    partial void OnEMP_SEXChanging(string value);
    partial void OnEMP_SEXChanged();
    partial void OnEMP_DATE_OF_BIRTHChanging(System.DateTime value);
    partial void OnEMP_DATE_OF_BIRTHChanged();
    partial void OnEMP_TYPEChanging(string value);
    partial void OnEMP_TYPEChanged();
    partial void OnEMP_JOB_DATEChanging(System.DateTime value);
    partial void OnEMP_JOB_DATEChanged();
    partial void OnEMP_PHONEChanging(string value);
    partial void OnEMP_PHONEChanged();
    partial void OnEMP_MAILChanging(string value);
    partial void OnEMP_MAILChanged();
    partial void OnSUP_ADDChanging(string value);
    partial void OnSUP_ADDChanged();
    #endregion
		
		public EMPLOYEE()
		{
			this._ADMINs = new EntitySet<ADMIN>(new Action<ADMIN>(this.attach_ADMINs), new Action<ADMIN>(this.detach_ADMINs));
			this._EMPACCOUNTs = new EntitySet<EMPACCOUNT>(new Action<EMPACCOUNT>(this.attach_EMPACCOUNTs), new Action<EMPACCOUNT>(this.detach_EMPACCOUNTs));
			this._SALEs = new EntitySet<SALE>(new Action<SALE>(this.attach_SALEs), new Action<SALE>(this.detach_SALEs));
			this._SUPPLIER = default(EntityRef<SUPPLIER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EMP_NAME
		{
			get
			{
				return this._EMP_NAME;
			}
			set
			{
				if ((this._EMP_NAME != value))
				{
					this.OnEMP_NAMEChanging(value);
					this.SendPropertyChanging();
					this._EMP_NAME = value;
					this.SendPropertyChanged("EMP_NAME");
					this.OnEMP_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_SEX", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string EMP_SEX
		{
			get
			{
				return this._EMP_SEX;
			}
			set
			{
				if ((this._EMP_SEX != value))
				{
					this.OnEMP_SEXChanging(value);
					this.SendPropertyChanging();
					this._EMP_SEX = value;
					this.SendPropertyChanged("EMP_SEX");
					this.OnEMP_SEXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_DATE_OF_BIRTH", DbType="Date NOT NULL")]
		public System.DateTime EMP_DATE_OF_BIRTH
		{
			get
			{
				return this._EMP_DATE_OF_BIRTH;
			}
			set
			{
				if ((this._EMP_DATE_OF_BIRTH != value))
				{
					this.OnEMP_DATE_OF_BIRTHChanging(value);
					this.SendPropertyChanging();
					this._EMP_DATE_OF_BIRTH = value;
					this.SendPropertyChanged("EMP_DATE_OF_BIRTH");
					this.OnEMP_DATE_OF_BIRTHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_TYPE", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EMP_TYPE
		{
			get
			{
				return this._EMP_TYPE;
			}
			set
			{
				if ((this._EMP_TYPE != value))
				{
					this.OnEMP_TYPEChanging(value);
					this.SendPropertyChanging();
					this._EMP_TYPE = value;
					this.SendPropertyChanged("EMP_TYPE");
					this.OnEMP_TYPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_JOB_DATE", DbType="Date NOT NULL")]
		public System.DateTime EMP_JOB_DATE
		{
			get
			{
				return this._EMP_JOB_DATE;
			}
			set
			{
				if ((this._EMP_JOB_DATE != value))
				{
					this.OnEMP_JOB_DATEChanging(value);
					this.SendPropertyChanging();
					this._EMP_JOB_DATE = value;
					this.SendPropertyChanged("EMP_JOB_DATE");
					this.OnEMP_JOB_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_PHONE", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string EMP_PHONE
		{
			get
			{
				return this._EMP_PHONE;
			}
			set
			{
				if ((this._EMP_PHONE != value))
				{
					this.OnEMP_PHONEChanging(value);
					this.SendPropertyChanging();
					this._EMP_PHONE = value;
					this.SendPropertyChanged("EMP_PHONE");
					this.OnEMP_PHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_MAIL", DbType="VarChar(50)")]
		public string EMP_MAIL
		{
			get
			{
				return this._EMP_MAIL;
			}
			set
			{
				if ((this._EMP_MAIL != value))
				{
					this.OnEMP_MAILChanging(value);
					this.SendPropertyChanging();
					this._EMP_MAIL = value;
					this.SendPropertyChanged("EMP_MAIL");
					this.OnEMP_MAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUP_ADD", DbType="NVarChar(50)")]
		public string SUP_ADD
		{
			get
			{
				return this._SUP_ADD;
			}
			set
			{
				if ((this._SUP_ADD != value))
				{
					if (this._SUPPLIER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUP_ADDChanging(value);
					this.SendPropertyChanging();
					this._SUP_ADD = value;
					this.SendPropertyChanged("SUP_ADD");
					this.OnSUP_ADDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_ADMIN", Storage="_ADMINs", ThisKey="EMP_ID", OtherKey="A_ID")]
		public EntitySet<ADMIN> ADMINs
		{
			get
			{
				return this._ADMINs;
			}
			set
			{
				this._ADMINs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_EMPACCOUNT", Storage="_EMPACCOUNTs", ThisKey="EMP_ID", OtherKey="EMPAC_ID")]
		public EntitySet<EMPACCOUNT> EMPACCOUNTs
		{
			get
			{
				return this._EMPACCOUNTs;
			}
			set
			{
				this._EMPACCOUNTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_SALE", Storage="_SALEs", ThisKey="EMP_ID", OtherKey="EMP_ID")]
		public EntitySet<SALE> SALEs
		{
			get
			{
				return this._SALEs;
			}
			set
			{
				this._SALEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPPLIER_EMPLOYEE", Storage="_SUPPLIER", ThisKey="SUP_ADD", OtherKey="SUP_ADD", IsForeignKey=true)]
		public SUPPLIER SUPPLIER
		{
			get
			{
				return this._SUPPLIER.Entity;
			}
			set
			{
				SUPPLIER previousValue = this._SUPPLIER.Entity;
				if (((previousValue != value) 
							|| (this._SUPPLIER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SUPPLIER.Entity = null;
						previousValue.EMPLOYEEs.Remove(this);
					}
					this._SUPPLIER.Entity = value;
					if ((value != null))
					{
						value.EMPLOYEEs.Add(this);
						this._SUP_ADD = value.SUP_ADD;
					}
					else
					{
						this._SUP_ADD = default(string);
					}
					this.SendPropertyChanged("SUPPLIER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ADMINs(ADMIN entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_ADMINs(ADMIN entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
		
		private void attach_EMPACCOUNTs(EMPACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_EMPACCOUNTs(EMPACCOUNT entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
		
		private void attach_SALEs(SALE entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = this;
		}
		
		private void detach_SALEs(SALE entity)
		{
			this.SendPropertyChanging();
			entity.EMPLOYEE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MEDICINES")]
	public partial class MEDICINE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _MED_BARCODE;
		
		private decimal _MED_ID;
		
		private string _MED_NAME;
		
		private int _MED_QTY;
		
		private string _MED_UNIT;
		
		private string _MED_CATEGORY;
		
		private decimal _MED_PRICE;
		
		private string _MED_STATUS;
		
		private EntitySet<PURCHASE> _PURCHASEs;
		
		private EntitySet<SALES_ITEM> _SALES_ITEMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMED_BARCODEChanging(decimal value);
    partial void OnMED_BARCODEChanged();
    partial void OnMED_IDChanging(decimal value);
    partial void OnMED_IDChanged();
    partial void OnMED_NAMEChanging(string value);
    partial void OnMED_NAMEChanged();
    partial void OnMED_QTYChanging(int value);
    partial void OnMED_QTYChanged();
    partial void OnMED_UNITChanging(string value);
    partial void OnMED_UNITChanged();
    partial void OnMED_CATEGORYChanging(string value);
    partial void OnMED_CATEGORYChanged();
    partial void OnMED_PRICEChanging(decimal value);
    partial void OnMED_PRICEChanged();
    partial void OnMED_STATUSChanging(string value);
    partial void OnMED_STATUSChanged();
    #endregion
		
		public MEDICINE()
		{
			this._PURCHASEs = new EntitySet<PURCHASE>(new Action<PURCHASE>(this.attach_PURCHASEs), new Action<PURCHASE>(this.detach_PURCHASEs));
			this._SALES_ITEMs = new EntitySet<SALES_ITEM>(new Action<SALES_ITEM>(this.attach_SALES_ITEMs), new Action<SALES_ITEM>(this.detach_SALES_ITEMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_BARCODE", DbType="Decimal(13,0) NOT NULL")]
		public decimal MED_BARCODE
		{
			get
			{
				return this._MED_BARCODE;
			}
			set
			{
				if ((this._MED_BARCODE != value))
				{
					this.OnMED_BARCODEChanging(value);
					this.SendPropertyChanging();
					this._MED_BARCODE = value;
					this.SendPropertyChanged("MED_BARCODE");
					this.OnMED_BARCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_ID", DbType="Decimal(6,0) NOT NULL", IsPrimaryKey=true)]
		public decimal MED_ID
		{
			get
			{
				return this._MED_ID;
			}
			set
			{
				if ((this._MED_ID != value))
				{
					this.OnMED_IDChanging(value);
					this.SendPropertyChanging();
					this._MED_ID = value;
					this.SendPropertyChanged("MED_ID");
					this.OnMED_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_NAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MED_NAME
		{
			get
			{
				return this._MED_NAME;
			}
			set
			{
				if ((this._MED_NAME != value))
				{
					this.OnMED_NAMEChanging(value);
					this.SendPropertyChanging();
					this._MED_NAME = value;
					this.SendPropertyChanged("MED_NAME");
					this.OnMED_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_QTY", DbType="Int NOT NULL")]
		public int MED_QTY
		{
			get
			{
				return this._MED_QTY;
			}
			set
			{
				if ((this._MED_QTY != value))
				{
					this.OnMED_QTYChanging(value);
					this.SendPropertyChanging();
					this._MED_QTY = value;
					this.SendPropertyChanged("MED_QTY");
					this.OnMED_QTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_UNIT", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MED_UNIT
		{
			get
			{
				return this._MED_UNIT;
			}
			set
			{
				if ((this._MED_UNIT != value))
				{
					this.OnMED_UNITChanging(value);
					this.SendPropertyChanging();
					this._MED_UNIT = value;
					this.SendPropertyChanged("MED_UNIT");
					this.OnMED_UNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_CATEGORY", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MED_CATEGORY
		{
			get
			{
				return this._MED_CATEGORY;
			}
			set
			{
				if ((this._MED_CATEGORY != value))
				{
					this.OnMED_CATEGORYChanging(value);
					this.SendPropertyChanging();
					this._MED_CATEGORY = value;
					this.SendPropertyChanged("MED_CATEGORY");
					this.OnMED_CATEGORYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_PRICE", DbType="Decimal(13,4) NOT NULL")]
		public decimal MED_PRICE
		{
			get
			{
				return this._MED_PRICE;
			}
			set
			{
				if ((this._MED_PRICE != value))
				{
					this.OnMED_PRICEChanging(value);
					this.SendPropertyChanging();
					this._MED_PRICE = value;
					this.SendPropertyChanged("MED_PRICE");
					this.OnMED_PRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_STATUS", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MED_STATUS
		{
			get
			{
				return this._MED_STATUS;
			}
			set
			{
				if ((this._MED_STATUS != value))
				{
					this.OnMED_STATUSChanging(value);
					this.SendPropertyChanging();
					this._MED_STATUS = value;
					this.SendPropertyChanged("MED_STATUS");
					this.OnMED_STATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICINE_PURCHASE", Storage="_PURCHASEs", ThisKey="MED_ID", OtherKey="MED_ID")]
		public EntitySet<PURCHASE> PURCHASEs
		{
			get
			{
				return this._PURCHASEs;
			}
			set
			{
				this._PURCHASEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICINE_SALES_ITEM", Storage="_SALES_ITEMs", ThisKey="MED_ID", OtherKey="MED_ID")]
		public EntitySet<SALES_ITEM> SALES_ITEMs
		{
			get
			{
				return this._SALES_ITEMs;
			}
			set
			{
				this._SALES_ITEMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PURCHASEs(PURCHASE entity)
		{
			this.SendPropertyChanging();
			entity.MEDICINE = this;
		}
		
		private void detach_PURCHASEs(PURCHASE entity)
		{
			this.SendPropertyChanging();
			entity.MEDICINE = null;
		}
		
		private void attach_SALES_ITEMs(SALES_ITEM entity)
		{
			this.SendPropertyChanging();
			entity.MEDICINE = this;
		}
		
		private void detach_SALES_ITEMs(SALES_ITEM entity)
		{
			this.SendPropertyChanging();
			entity.MEDICINE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PURCHASE")]
	public partial class PURCHASE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _P_ID;
		
		private string _SUP_ID;
		
		private decimal _MED_ID;
		
		private int _P_QTY;
		
		private string _P_UNIT;
		
		private decimal _P_COST;
		
		private System.DateTime _PUR_DATE;
		
		private System.DateTime _MFG_DATE;
		
		private System.DateTime _EXP_DATE;
		
		private string _P_STATUS;
		
		private EntityRef<MEDICINE> _MEDICINE;
		
		private EntityRef<SUPPLIER> _SUPPLIER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnP_IDChanging(decimal value);
    partial void OnP_IDChanged();
    partial void OnSUP_IDChanging(string value);
    partial void OnSUP_IDChanged();
    partial void OnMED_IDChanging(decimal value);
    partial void OnMED_IDChanged();
    partial void OnP_QTYChanging(int value);
    partial void OnP_QTYChanged();
    partial void OnP_UNITChanging(string value);
    partial void OnP_UNITChanged();
    partial void OnP_COSTChanging(decimal value);
    partial void OnP_COSTChanged();
    partial void OnPUR_DATEChanging(System.DateTime value);
    partial void OnPUR_DATEChanged();
    partial void OnMFG_DATEChanging(System.DateTime value);
    partial void OnMFG_DATEChanged();
    partial void OnEXP_DATEChanging(System.DateTime value);
    partial void OnEXP_DATEChanged();
    partial void OnP_STATUSChanging(string value);
    partial void OnP_STATUSChanged();
    #endregion
		
		public PURCHASE()
		{
			this._MEDICINE = default(EntityRef<MEDICINE>);
			this._SUPPLIER = default(EntityRef<SUPPLIER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_ID", DbType="Decimal(6,0) NOT NULL", IsPrimaryKey=true)]
		public decimal P_ID
		{
			get
			{
				return this._P_ID;
			}
			set
			{
				if ((this._P_ID != value))
				{
					this.OnP_IDChanging(value);
					this.SendPropertyChanging();
					this._P_ID = value;
					this.SendPropertyChanged("P_ID");
					this.OnP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUP_ID", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string SUP_ID
		{
			get
			{
				return this._SUP_ID;
			}
			set
			{
				if ((this._SUP_ID != value))
				{
					if (this._SUPPLIER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSUP_IDChanging(value);
					this.SendPropertyChanging();
					this._SUP_ID = value;
					this.SendPropertyChanged("SUP_ID");
					this.OnSUP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_ID", DbType="Decimal(6,0) NOT NULL", IsPrimaryKey=true)]
		public decimal MED_ID
		{
			get
			{
				return this._MED_ID;
			}
			set
			{
				if ((this._MED_ID != value))
				{
					if (this._MEDICINE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMED_IDChanging(value);
					this.SendPropertyChanging();
					this._MED_ID = value;
					this.SendPropertyChanged("MED_ID");
					this.OnMED_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_QTY", DbType="Int NOT NULL")]
		public int P_QTY
		{
			get
			{
				return this._P_QTY;
			}
			set
			{
				if ((this._P_QTY != value))
				{
					this.OnP_QTYChanging(value);
					this.SendPropertyChanging();
					this._P_QTY = value;
					this.SendPropertyChanged("P_QTY");
					this.OnP_QTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_UNIT", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string P_UNIT
		{
			get
			{
				return this._P_UNIT;
			}
			set
			{
				if ((this._P_UNIT != value))
				{
					this.OnP_UNITChanging(value);
					this.SendPropertyChanging();
					this._P_UNIT = value;
					this.SendPropertyChanged("P_UNIT");
					this.OnP_UNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_COST", DbType="Decimal(11,4) NOT NULL")]
		public decimal P_COST
		{
			get
			{
				return this._P_COST;
			}
			set
			{
				if ((this._P_COST != value))
				{
					this.OnP_COSTChanging(value);
					this.SendPropertyChanging();
					this._P_COST = value;
					this.SendPropertyChanged("P_COST");
					this.OnP_COSTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PUR_DATE", DbType="Date NOT NULL")]
		public System.DateTime PUR_DATE
		{
			get
			{
				return this._PUR_DATE;
			}
			set
			{
				if ((this._PUR_DATE != value))
				{
					this.OnPUR_DATEChanging(value);
					this.SendPropertyChanging();
					this._PUR_DATE = value;
					this.SendPropertyChanged("PUR_DATE");
					this.OnPUR_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MFG_DATE", DbType="Date NOT NULL")]
		public System.DateTime MFG_DATE
		{
			get
			{
				return this._MFG_DATE;
			}
			set
			{
				if ((this._MFG_DATE != value))
				{
					this.OnMFG_DATEChanging(value);
					this.SendPropertyChanging();
					this._MFG_DATE = value;
					this.SendPropertyChanged("MFG_DATE");
					this.OnMFG_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXP_DATE", DbType="Date NOT NULL")]
		public System.DateTime EXP_DATE
		{
			get
			{
				return this._EXP_DATE;
			}
			set
			{
				if ((this._EXP_DATE != value))
				{
					this.OnEXP_DATEChanging(value);
					this.SendPropertyChanging();
					this._EXP_DATE = value;
					this.SendPropertyChanged("EXP_DATE");
					this.OnEXP_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_STATUS", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string P_STATUS
		{
			get
			{
				return this._P_STATUS;
			}
			set
			{
				if ((this._P_STATUS != value))
				{
					this.OnP_STATUSChanging(value);
					this.SendPropertyChanging();
					this._P_STATUS = value;
					this.SendPropertyChanged("P_STATUS");
					this.OnP_STATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICINE_PURCHASE", Storage="_MEDICINE", ThisKey="MED_ID", OtherKey="MED_ID", IsForeignKey=true)]
		public MEDICINE MEDICINE
		{
			get
			{
				return this._MEDICINE.Entity;
			}
			set
			{
				MEDICINE previousValue = this._MEDICINE.Entity;
				if (((previousValue != value) 
							|| (this._MEDICINE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEDICINE.Entity = null;
						previousValue.PURCHASEs.Remove(this);
					}
					this._MEDICINE.Entity = value;
					if ((value != null))
					{
						value.PURCHASEs.Add(this);
						this._MED_ID = value.MED_ID;
					}
					else
					{
						this._MED_ID = default(decimal);
					}
					this.SendPropertyChanged("MEDICINE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPPLIER_PURCHASE", Storage="_SUPPLIER", ThisKey="SUP_ID", OtherKey="SUP_ID", IsForeignKey=true)]
		public SUPPLIER SUPPLIER
		{
			get
			{
				return this._SUPPLIER.Entity;
			}
			set
			{
				SUPPLIER previousValue = this._SUPPLIER.Entity;
				if (((previousValue != value) 
							|| (this._SUPPLIER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SUPPLIER.Entity = null;
						previousValue.PURCHASEs.Remove(this);
					}
					this._SUPPLIER.Entity = value;
					if ((value != null))
					{
						value.PURCHASEs.Add(this);
						this._SUP_ID = value.SUP_ID;
					}
					else
					{
						this._SUP_ID = default(string);
					}
					this.SendPropertyChanged("SUPPLIER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SALES")]
	public partial class SALE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _S_ID;
		
		private System.DateTime _S_DATE;
		
		private System.TimeSpan _S_TIME;
		
		private string _C_ID;
		
		private System.Nullable<decimal> _S_AMT;
		
		private string _EMP_ID;
		
		private EntitySet<SALES_ITEM> _SALES_ITEMs;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<EMPLOYEE> _EMPLOYEE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_IDChanging(int value);
    partial void OnS_IDChanged();
    partial void OnS_DATEChanging(System.DateTime value);
    partial void OnS_DATEChanged();
    partial void OnS_TIMEChanging(System.TimeSpan value);
    partial void OnS_TIMEChanged();
    partial void OnC_IDChanging(string value);
    partial void OnC_IDChanged();
    partial void OnS_AMTChanging(System.Nullable<decimal> value);
    partial void OnS_AMTChanged();
    partial void OnEMP_IDChanging(string value);
    partial void OnEMP_IDChanged();
    #endregion
		
		public SALE()
		{
			this._SALES_ITEMs = new EntitySet<SALES_ITEM>(new Action<SALES_ITEM>(this.attach_SALES_ITEMs), new Action<SALES_ITEM>(this.detach_SALES_ITEMs));
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._EMPLOYEE = default(EntityRef<EMPLOYEE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int S_ID
		{
			get
			{
				return this._S_ID;
			}
			set
			{
				if ((this._S_ID != value))
				{
					this.OnS_IDChanging(value);
					this.SendPropertyChanging();
					this._S_ID = value;
					this.SendPropertyChanged("S_ID");
					this.OnS_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_DATE", DbType="Date NOT NULL")]
		public System.DateTime S_DATE
		{
			get
			{
				return this._S_DATE;
			}
			set
			{
				if ((this._S_DATE != value))
				{
					this.OnS_DATEChanging(value);
					this.SendPropertyChanging();
					this._S_DATE = value;
					this.SendPropertyChanged("S_DATE");
					this.OnS_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_TIME", DbType="Time NOT NULL")]
		public System.TimeSpan S_TIME
		{
			get
			{
				return this._S_TIME;
			}
			set
			{
				if ((this._S_TIME != value))
				{
					this.OnS_TIMEChanging(value);
					this.SendPropertyChanging();
					this._S_TIME = value;
					this.SendPropertyChanged("S_TIME");
					this.OnS_TIMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_C_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string C_ID
		{
			get
			{
				return this._C_ID;
			}
			set
			{
				if ((this._C_ID != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnC_IDChanging(value);
					this.SendPropertyChanging();
					this._C_ID = value;
					this.SendPropertyChanged("C_ID");
					this.OnC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_AMT", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> S_AMT
		{
			get
			{
				return this._S_AMT;
			}
			set
			{
				if ((this._S_AMT != value))
				{
					this.OnS_AMTChanging(value);
					this.SendPropertyChanging();
					this._S_AMT = value;
					this.SendPropertyChanged("S_AMT");
					this.OnS_AMTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMP_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EMP_ID
		{
			get
			{
				return this._EMP_ID;
			}
			set
			{
				if ((this._EMP_ID != value))
				{
					if (this._EMPLOYEE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEMP_IDChanging(value);
					this.SendPropertyChanging();
					this._EMP_ID = value;
					this.SendPropertyChanged("EMP_ID");
					this.OnEMP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SALE_SALES_ITEM", Storage="_SALES_ITEMs", ThisKey="S_ID", OtherKey="S_ID")]
		public EntitySet<SALES_ITEM> SALES_ITEMs
		{
			get
			{
				return this._SALES_ITEMs;
			}
			set
			{
				this._SALES_ITEMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_SALE", Storage="_CUSTOMER", ThisKey="C_ID", OtherKey="C_ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.SALEs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.SALEs.Add(this);
						this._C_ID = value.C_ID;
					}
					else
					{
						this._C_ID = default(string);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EMPLOYEE_SALE", Storage="_EMPLOYEE", ThisKey="EMP_ID", OtherKey="EMP_ID", IsForeignKey=true)]
		public EMPLOYEE EMPLOYEE
		{
			get
			{
				return this._EMPLOYEE.Entity;
			}
			set
			{
				EMPLOYEE previousValue = this._EMPLOYEE.Entity;
				if (((previousValue != value) 
							|| (this._EMPLOYEE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EMPLOYEE.Entity = null;
						previousValue.SALEs.Remove(this);
					}
					this._EMPLOYEE.Entity = value;
					if ((value != null))
					{
						value.SALEs.Add(this);
						this._EMP_ID = value.EMP_ID;
					}
					else
					{
						this._EMP_ID = default(string);
					}
					this.SendPropertyChanged("EMPLOYEE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SALES_ITEMs(SALES_ITEM entity)
		{
			this.SendPropertyChanging();
			entity.SALE = this;
		}
		
		private void detach_SALES_ITEMs(SALES_ITEM entity)
		{
			this.SendPropertyChanging();
			entity.SALE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SALES_ITEMS")]
	public partial class SALES_ITEM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _S_ID;
		
		private decimal _MED_ID;
		
		private int _ST_QTY;
		
		private string _ST_UNIT;
		
		private decimal _TOTAL_PRICE;
		
		private EntityRef<SALE> _SALE;
		
		private EntityRef<MEDICINE> _MEDICINE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_IDChanging(int value);
    partial void OnS_IDChanged();
    partial void OnMED_IDChanging(decimal value);
    partial void OnMED_IDChanged();
    partial void OnST_QTYChanging(int value);
    partial void OnST_QTYChanged();
    partial void OnST_UNITChanging(string value);
    partial void OnST_UNITChanged();
    partial void OnTOTAL_PRICEChanging(decimal value);
    partial void OnTOTAL_PRICEChanged();
    #endregion
		
		public SALES_ITEM()
		{
			this._SALE = default(EntityRef<SALE>);
			this._MEDICINE = default(EntityRef<MEDICINE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int S_ID
		{
			get
			{
				return this._S_ID;
			}
			set
			{
				if ((this._S_ID != value))
				{
					if (this._SALE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_IDChanging(value);
					this.SendPropertyChanging();
					this._S_ID = value;
					this.SendPropertyChanged("S_ID");
					this.OnS_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MED_ID", DbType="Decimal(6,0) NOT NULL", IsPrimaryKey=true)]
		public decimal MED_ID
		{
			get
			{
				return this._MED_ID;
			}
			set
			{
				if ((this._MED_ID != value))
				{
					if (this._MEDICINE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMED_IDChanging(value);
					this.SendPropertyChanging();
					this._MED_ID = value;
					this.SendPropertyChanged("MED_ID");
					this.OnMED_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ST_QTY", DbType="Int NOT NULL")]
		public int ST_QTY
		{
			get
			{
				return this._ST_QTY;
			}
			set
			{
				if ((this._ST_QTY != value))
				{
					this.OnST_QTYChanging(value);
					this.SendPropertyChanging();
					this._ST_QTY = value;
					this.SendPropertyChanged("ST_QTY");
					this.OnST_QTYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ST_UNIT", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ST_UNIT
		{
			get
			{
				return this._ST_UNIT;
			}
			set
			{
				if ((this._ST_UNIT != value))
				{
					this.OnST_UNITChanging(value);
					this.SendPropertyChanging();
					this._ST_UNIT = value;
					this.SendPropertyChanged("ST_UNIT");
					this.OnST_UNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTAL_PRICE", DbType="Decimal(20,2) NOT NULL")]
		public decimal TOTAL_PRICE
		{
			get
			{
				return this._TOTAL_PRICE;
			}
			set
			{
				if ((this._TOTAL_PRICE != value))
				{
					this.OnTOTAL_PRICEChanging(value);
					this.SendPropertyChanging();
					this._TOTAL_PRICE = value;
					this.SendPropertyChanged("TOTAL_PRICE");
					this.OnTOTAL_PRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SALE_SALES_ITEM", Storage="_SALE", ThisKey="S_ID", OtherKey="S_ID", IsForeignKey=true)]
		public SALE SALE
		{
			get
			{
				return this._SALE.Entity;
			}
			set
			{
				SALE previousValue = this._SALE.Entity;
				if (((previousValue != value) 
							|| (this._SALE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SALE.Entity = null;
						previousValue.SALES_ITEMs.Remove(this);
					}
					this._SALE.Entity = value;
					if ((value != null))
					{
						value.SALES_ITEMs.Add(this);
						this._S_ID = value.S_ID;
					}
					else
					{
						this._S_ID = default(int);
					}
					this.SendPropertyChanged("SALE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MEDICINE_SALES_ITEM", Storage="_MEDICINE", ThisKey="MED_ID", OtherKey="MED_ID", IsForeignKey=true)]
		public MEDICINE MEDICINE
		{
			get
			{
				return this._MEDICINE.Entity;
			}
			set
			{
				MEDICINE previousValue = this._MEDICINE.Entity;
				if (((previousValue != value) 
							|| (this._MEDICINE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MEDICINE.Entity = null;
						previousValue.SALES_ITEMs.Remove(this);
					}
					this._MEDICINE.Entity = value;
					if ((value != null))
					{
						value.SALES_ITEMs.Add(this);
						this._MED_ID = value.MED_ID;
					}
					else
					{
						this._MED_ID = default(decimal);
					}
					this.SendPropertyChanged("MEDICINE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SUPPLIERS")]
	public partial class SUPPLIER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SUP_ID;
		
		private string _SUP_NAME;
		
		private string _SUP_ADD;
		
		private string _SUP_PHONE;
		
		private string _SUP_MAIL;
		
		private EntitySet<EMPLOYEE> _EMPLOYEEs;
		
		private EntitySet<PURCHASE> _PURCHASEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSUP_IDChanging(string value);
    partial void OnSUP_IDChanged();
    partial void OnSUP_NAMEChanging(string value);
    partial void OnSUP_NAMEChanged();
    partial void OnSUP_ADDChanging(string value);
    partial void OnSUP_ADDChanged();
    partial void OnSUP_PHONEChanging(string value);
    partial void OnSUP_PHONEChanged();
    partial void OnSUP_MAILChanging(string value);
    partial void OnSUP_MAILChanged();
    #endregion
		
		public SUPPLIER()
		{
			this._EMPLOYEEs = new EntitySet<EMPLOYEE>(new Action<EMPLOYEE>(this.attach_EMPLOYEEs), new Action<EMPLOYEE>(this.detach_EMPLOYEEs));
			this._PURCHASEs = new EntitySet<PURCHASE>(new Action<PURCHASE>(this.attach_PURCHASEs), new Action<PURCHASE>(this.detach_PURCHASEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUP_ID", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SUP_ID
		{
			get
			{
				return this._SUP_ID;
			}
			set
			{
				if ((this._SUP_ID != value))
				{
					this.OnSUP_IDChanging(value);
					this.SendPropertyChanging();
					this._SUP_ID = value;
					this.SendPropertyChanged("SUP_ID");
					this.OnSUP_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUP_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SUP_NAME
		{
			get
			{
				return this._SUP_NAME;
			}
			set
			{
				if ((this._SUP_NAME != value))
				{
					this.OnSUP_NAMEChanging(value);
					this.SendPropertyChanging();
					this._SUP_NAME = value;
					this.SendPropertyChanged("SUP_NAME");
					this.OnSUP_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUP_ADD", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SUP_ADD
		{
			get
			{
				return this._SUP_ADD;
			}
			set
			{
				if ((this._SUP_ADD != value))
				{
					this.OnSUP_ADDChanging(value);
					this.SendPropertyChanging();
					this._SUP_ADD = value;
					this.SendPropertyChanged("SUP_ADD");
					this.OnSUP_ADDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUP_PHONE", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string SUP_PHONE
		{
			get
			{
				return this._SUP_PHONE;
			}
			set
			{
				if ((this._SUP_PHONE != value))
				{
					this.OnSUP_PHONEChanging(value);
					this.SendPropertyChanging();
					this._SUP_PHONE = value;
					this.SendPropertyChanged("SUP_PHONE");
					this.OnSUP_PHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SUP_MAIL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SUP_MAIL
		{
			get
			{
				return this._SUP_MAIL;
			}
			set
			{
				if ((this._SUP_MAIL != value))
				{
					this.OnSUP_MAILChanging(value);
					this.SendPropertyChanging();
					this._SUP_MAIL = value;
					this.SendPropertyChanged("SUP_MAIL");
					this.OnSUP_MAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPPLIER_EMPLOYEE", Storage="_EMPLOYEEs", ThisKey="SUP_ADD", OtherKey="SUP_ADD")]
		public EntitySet<EMPLOYEE> EMPLOYEEs
		{
			get
			{
				return this._EMPLOYEEs;
			}
			set
			{
				this._EMPLOYEEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SUPPLIER_PURCHASE", Storage="_PURCHASEs", ThisKey="SUP_ID", OtherKey="SUP_ID")]
		public EntitySet<PURCHASE> PURCHASEs
		{
			get
			{
				return this._PURCHASEs;
			}
			set
			{
				this._PURCHASEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.SUPPLIER = this;
		}
		
		private void detach_EMPLOYEEs(EMPLOYEE entity)
		{
			this.SendPropertyChanging();
			entity.SUPPLIER = null;
		}
		
		private void attach_PURCHASEs(PURCHASE entity)
		{
			this.SendPropertyChanging();
			entity.SUPPLIER = this;
		}
		
		private void detach_PURCHASEs(PURCHASE entity)
		{
			this.SendPropertyChanging();
			entity.SUPPLIER = null;
		}
	}
}
#pragma warning restore 1591
